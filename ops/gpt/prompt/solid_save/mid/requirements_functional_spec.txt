1. 功能描述
提供用户与 Bot 的多轮对话能力，支持上下文记忆、角色切换与会话管理。
 存在价值：确保用户在单个会话中保持连续对话体验，同时允许用户通过按钮快速管理会话流（如重生成、停止生成、新建会话、切换角色）。

---
2. 用户场景
场景编号	触发条件	用户操作	系统响应
S1	用户首次进入 Bot	输入文本	系统生成 session_id 并返回 Bot 回复，附带按钮（重生成、停止生成、新对话）
S2	用户在会话中	点击「重新生成回复」按钮	使用相同 session_id，对上一次用户输入重新生成 AI 回复
S3	Bot 回复生成中	用户点击「停止生成」	系统中断当前生成，保持已有上下文，session_id 不变
S4	用户在会话中	点击「开启新对话」按钮	系统清空上下文，生成新的 session_id，开启新对话
S5	用户选择角色	点击「选择角色」跳转 → 从角色频道选择	系统加载 role_id 对应的角色定义（system_prompt、model_name、参数），并返回 Bot 对话入口
S6	用户有私人角色	在对话中选择「私人角色」	系统根据 user_id + private_role_id 加载角色卡和历史记录

---
3. 输入与输出（字段定义）

3.1 会话字段（Session）
字段名	类型	约束	必填
session_id	string	UUID 格式，长度 36	是
user_id	string	长度 ≤ 64，唯一用户标识	是
role_id	string	长度 ≤ 64，引用角色表；默认空表示自由对话	否
message_id	string	UUID 格式，长度 36	是
content	string	长度 ≤ 10,000，UTF-8 编码	是
timestamp	int	Unix 时间戳（秒）	是

3.2 用户私人角色（Private Role）
字段名	类型	约束	必填
private_role_id	string	UUID 格式，长度 36	是
user_id	string	外键，关联用户	是
role_id	string	外键，引用基础角色定义	否
history	array<object>	对话历史，最大 100 条	否

3.3 静态角色（Role）
字段名	类型	约束	必填
role_id	string	UUID 格式，长度 36	是
system_prompt	string	长度 ≤ 5000	是
preset_dialogues	array<string>	每条长度 ≤ 1000，最多 20 条	否
model_name	enum	[“gpt-3.5”, “gpt-4”, “gpt-4o”]	是
parameters	json	结构化参数，最大 2KB	否

---
4. 边界条件与异常情况
错误码	描述	触发条件	系统行为
4001	无效 session_id	请求中传入不存在或过期的 session_id	返回错误提示，不创建新会话
4002	消息过长	content 长度 > 10,000	返回错误提示，不保存消息
4003	角色不存在	role_id 或 private_role_id 不存在	返回错误提示，维持原有对话
4004	回复生成超时	AI 回复生成超过 30 秒	返回错误提示，允许用户点击「重新生成」
4005	内存上限溢出	单会话消息数 > 500 条	自动丢弃最早 50 条，保留最新 450 条

---
5. 验收标准（可作为测试用例模板）
输入	期望输出	系统状态变化
用户输入「你好」	Bot 回复文本 + 附带操作按钮	创建新 session_id 并保存消息
点击「重新生成回复」	新生成一条回复，内容不同	使用相同 session_id，生成新 message_id
点击「开启新对话」	Bot 回复欢迎语，附带按钮	清空上下文，生成新 session_id
选择一个 role_id	Bot 回复角色预设对话	当前会话绑定 role_id
输入超过 10,000 字符	返回错误提示	不保存消息，状态不变

---
6. 测试用例示例
6.1 正常场景
- 输入：用户进入后输入「你好」
- 期望输出：Bot 返回一条文本回复，并附带 3 个按钮（重新生成、停止生成、新对话）
- 系统状态：生成 session_id，保存消息记录
6.2 边界场景
- 输入：用户发送消息长度 = 10,000 字符
- 期望输出：系统正常保存消息并返回 Bot 回复
- 系统状态：消息成功写入，message_id 有效
6.3 异常场景
- 输入：用户发送消息长度 = 10,001 字符
- 期望输出：系统返回错误码 4002，提示「消息过长」
- 系统状态：消息未保存，session_id 不变