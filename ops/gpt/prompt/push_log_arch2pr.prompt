
**任务说明：**
请基于以下 Git diff 与 commit 汇总，生成一份 **面向产品经理/业务角色的功能进展播报**。
请严格遵循以下要求：

---

### 1. 过滤规则

* **保留**：功能开发、需求实现、用户体验优化、接口/交互改动、业务逻辑调整。
* **忽略**：纯工程运维相关改动（如依赖升级、性能调优、日志/注释修改、CI/CD 配置、监控报警、内部工具重构），不必向产品呈现。其他和产品无关的改动，直接忽略。

以下改动应被判定为工程/运维噪音，直接忽略，不在面向产品的播报中出现：
- CI/CD 配置、部署脚本、基础设施文件
- 依赖与包管理文件
- 仅涉及注释、格式化、文档拼写的修改
- 日志、监控、报警相关改动
- 测试目录或 mock 文件

---

### 2. 输出结构

#### **功能变更摘要（必填）**

* 用简洁语言（非技术术语）总结 push 中与产品/业务相关的核心功能变化。
* 保证每一点都是产品关心的“用户体验/业务价值”。

#### **用户价值 & 需求对齐（可选）**

* 说明本次改动满足了哪些用户需求、业务目标或功能文档中的条目。
* 如果只是部分实现，明确指出剩余差距。

#### **场景化说明（可选）**

* 用“用户故事”视角解释：用户在什么场景下会感知到改动？
* 强调对最终用户的价值，而不是技术细节。

#### **验证与关注点（可选）**

* 产品需要特别注意或验证的地方（如：新功能灰度验证、交互边界情况）。
* 如果无用户可见风险，写“无”。

---

### 3. 输出风格

* 面向产品/业务人员，不使用专业工程术语。
* 尽量使用 **产品语言**

---

### 4. 输入分层

#### **外圈（产品固定资产）**

```
===================
{product_business_goal}  # 阶段性业务目标（例如：提升留存率、降低转化漏斗流失）
===================
以下是该项目的总架构情况
{project_architecture}  

{project_principle}
====================
```

#### **中圈（需求文档）**

```

功能规格说明（Functional Spec）本阶段对应的需求文档/功能说明
===================
{requirements_functional_spec}   # 功能规格说明Functional Spec
===================
```

#### **内圈（push commit 聚合 + diff 内容）**

```
===================
{git_push_commit_logs}  
===================
```



