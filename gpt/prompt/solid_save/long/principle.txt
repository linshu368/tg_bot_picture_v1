

## 技术栈

### 架构模式
- **Clean Architecture** - 清洁架构，分层设计
- **Dependency Injection** - 依赖注入模式
- **Repository Pattern** - 仓储模式
- **Composite Repository** - 组合仓储（V2新增）

### 架构设计原则 
既要保证未来3-6个月的系统的可维护性，可拓展性。又要坚持敏捷开发的节奏，坚持快速迭代。需要在功能开发和系统维护成本之间寻求平衡。具体这个平衡点的关键因素就是项目的阶段，是起步期，成长期，还是成熟期。
目前的项目是起步期，所以不要过份的追求架构的固化，但是遵循以下设计原则。而且目前的工程师开发者只有2-3人，所以不存在复杂的团队协作问题。

 1. **依赖倒置原则（DIP）**

* **类型**：面向对象设计原则
* **类别**：**高层设计原则**
* **描述**：DIP 强调了高层模块不应依赖于低层模块，而应依赖于抽象（接口或抽象类）。这有助于降低模块间的耦合度，方便系统扩展和维护。

 2. **单一职责原则（SRP）**

* **类型**：面向对象设计原则
* **类别**：**类设计原则**
* **描述**：SRP 确保一个类或模块只负责一个功能，从而减少了类的复杂度，提升了可维护性和可扩展性。

 3. **开闭原则（OCP）**

* **类型**：面向对象设计原则
* **类别**：**扩展性与稳定性原则**
* **描述**：OCP 鼓励系统的可扩展性，即对功能的扩展要开放，对修改关闭。通过使用抽象和多态等方式，可以在不修改现有代码的情况下增加新的功能。

 4. **里氏替换原则（LSP）**

* **类型**：面向对象设计原则
* **类别**：**继承与多态原则**
* **描述**：LSP 确保子类对象可以替代父类对象而不会影响程序的行为，是开闭原则的基础之一，保证了继承结构的正确性和稳定性。

 5. **接口隔离原则（ISP）**

* **类型**：面向对象设计原则
* **类别**：**接口设计原则**
* **描述**：ISP 强调接口应当小而专一，避免大而全的接口。通过拆分接口，每个接口满足特定用户的需求，减少了不必要的依赖。


这些原则属于 **面向对象设计（OOD）** 的范畴，目的是通过高效的设计模式和结构，降低系统的耦合度，提高可维护性、可扩展性和稳定性。它们帮助开发团队在面对复杂系统时做出清晰的架构决策，从而保证系统的长远发展。


### 开发风格——敏捷开发
这是一个面向C端的产品，且是初期，所以要快速迭代。

1. **模块化与解耦性**：保持代码灵活和高度模块化，确保团队能够快速迭代各个模块，而不影响整体系统。每个模块应易于替换和升级，以便在敏捷开发中实现快速调整。

2. **快速迭代与持续交付**：强调通过短周期的开发与交付，快速推出最小可行产品（MVP）并验证市场需求。确保每次迭代都能快速响应用户反馈并进行优化。

3. **用户驱动与反馈循环**：敏捷开发强调与用户保持紧密的联系，确保开发优先级与实际需求紧密对接。定期收集用户反馈并进行快速的调整和改进。

4. **跨职能协作**：团队成员之间应紧密合作，跨职能的沟通和协作能够提高开发效率并减少需求变更导致的延误。


