**请基于以下 Git diff 生成提交信息，确保每个部分的内容都涵盖以下几个维度：**

### 1. **diff内容概述**

* **请简要描述本次提交的diff主要变更。**

  参考选项：

  * **新增功能**：如果是新增功能，请明确说明该功能的主要功能和目的。
  * **Bug修复**：如果修复了Bug，请说明该Bug的表现和解决方案。
  * **性能优化**：如果进行了性能优化，请描述优化的具体内容，例如减少了响应时间、优化了数据库查询等。
  * **代码重构**：如果是重构代码，请简述重构的部分和其目的（例如提高可读性、模块化、减少重复代码）。
  * **文档更新**：如果更新了文档，请简述更新的内容（如API文档、功能说明、安装指南等）。

### 2. **代码改动的动机与目标**

* **为什么进行这些改动？**

  * 解释本次提交背后的目标和动机，例如：是否为了满足用户需求，解决某个痛点，或者是提升现有功能的性能？
  * 如果是响应用户反馈或业务需求，简要说明需求背景及其重要性。
  * 如果是为了技术债务清理、系统重构或模块优化，请明确说明。

### 3. **改动的影响**

* **请评估本次提交对系统或项目的影响。**

  * 这次变更是否影响了系统的其他模块？例如，是否涉及到跨模块的改动，影响了核心业务逻辑或数据库结构？
  * 是否新增了外部依赖（如库、服务等）或者改变了现有依赖？
  * 这次改动是否对系统的可扩展性、可维护性或性能产生了显著影响？请简述这些影响。

### 4. **技术细节与实现方式**

* **本次提交采用了哪些技术方案或实现方法？**

  * 如果引入了新的技术或工具，请简要描述它们的作用以及为何选择它们。
  * 详细描述本次改动涉及的核心实现，例如：是否使用了新的设计模式、数据结构或算法来优化性能、解决特定问题？
  * 如果有涉及数据库操作，简要说明数据库模式的改变或新的查询优化。

### 5. **潜在的风险与改进点**

* **本次提交是否存在潜在风险？**
   (这不是必选项)
  * 只有在真正有风险的时候才涉及，没有风险就不要写了，防止因噎废食，过于顾虑风险而导致开发进度过慢。如果有风险，则挑重点说：
  * 请说明本次提交是否有可能引入未知的Bug，或者在某些情况下可能会导致不稳定或不一致的行为。
  * 如果存在需要特别关注的地方（如多线程问题、数据一致性问题等），请说明。
  如果有风险，可以说明是否需要立刻修改。
---

### **输入分层：**

#### **外圈（整体项目概述）：**

* **项目目标与背景**：该层次为整体项目提供宏观视角，帮助理解项目的背景、原则、战略目标、技术架构等，不涉及具体代码。它为理解每个提交的上下文提供指导，使提交与整体目标保持一致。

```
===================
{project.intro}  
===================
```

#### **中圈（阶段性任务）：**

* **阶段性目标**：聚焦于当前阶段的具体任务。明确当前开发的具体目标，为什么要做这个任务。

```
===================
{workstream.current_mission} 
{workstream.change_scope_guide} 
===================
```

#### **内圈（具体代码 diff）：**

* **代码层面的变更**：此部分是最具体的，聚焦在代码的修改、修复、优化等技术实现方面。它细化了外圈的宏观目标与中圈的阶段任务，确保每个提交都能有效支撑当前阶段的任务，并推进项目目标。

---

## 特别规则

- 如果输入包含 **单个 diff** → 生成 **单次提交的 message**（commitlog）。  
- 如果输入包含 **多个 diff** → 生成 **阶段性总结的 message**（pushlog），避免逐条罗列，应聚合总结整体目标和改动。  
- 生成结果只包含 `message` 字段的结构：
  ```json
  {
    "message": {
      "title": "...",
      "body": "..."
    }
  }


```
===================
{git diff --cached}
===================
```

